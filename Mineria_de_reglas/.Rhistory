data$Class <- factor(data$Class,levels=c(1,0),labels=c('yes','no'))
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data)
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
moda_div
prediction<-rep(model.zeror,dim(data)[0])
dim(data)[0]
dim(data)[1]
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
model.zeror <- names(moda_div)
prediction<-rep(model.zeror,dim(data)[1])
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
model.zeror <- names(moda_div)
prediction<-rep(model.zeror,dim(data)[1])
confusionMatrix(prediction,data$Class)
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
model.zeror <- names(moda_div)
prediction<-rep(model.zeror,dim(data)[1])
prediction <- factor(prediction,levels=c(1,0),labels=c('yes','no'))
confusionMatrix(prediction,data$Class)
prediction <- factor(prediction,levels=c(1,0),labels=c('yes','no'))
prediction
prediction<-rep(model.zeror,dim(data)[1])
prediction
prediction<-rep(model.zeror,dim(data)[1])
prediction
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
prediction<-rep(moda_div,dim(data)[1])
prediction <- factor(prediction,levels=c(1,0),labels=c('yes','no'))
confusionMatrix(prediction,data$Class)
prediction
prediction<-rep(moda_div,dim(data)[1])
prediction
prediction <- factor(prediction,levels=c(1,0),labels=c('yes','no'))
confusionMatrix(prediction,data$Class)
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
prediction<-rep(moda_div,dim(data)[1])
prediction <- factor(prediction,levels=c('yes','no'))
confusionMatrix(prediction,data$Class)
library(OneR)
library(OneR)
data_disc<-data
#solucion
model <- OneR(Class~.,data=data_disc, verbose = TRUE)
library(OneR)
data_disc<-data
#solucion
data_disc <- optbin(Class~.,data=data_disc)
library(OneR)
data_disc<-data
#solucion
data_disc <- optbin(Class~.,data=data_disc)
library(OneR)
#solucion
model <- OneR(Class~.,data=data_disc, verbose = TRUE)
summary(model)
library(readxl)
data <- read_excel("divorce.xlsx")
data<-as.data.frame(data)
table(data$Class)
#solucion
data$Class <- factor(data$Class,levels=c(1,0),labels=c('no','yes'))
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
prediction<-rep(moda_div,dim(data)[1])
prediction <- factor(prediction,levels=c('no','yes'))
confusionMatrix(prediction,data$Class)
library(OneR)
data_disc<-data
#solucion
data_disc <- optbin(Class~.,data=data_disc)
library(OneR)
#solucion
model <- OneR(Class~.,data=data_disc, verbose = TRUE)
summary(model)
# solucion
predict(model,data_disc)
# solucion
prediction <- predict(model,data_disc)
confusionMatrix(prediction,data$Class)
confusionMatrix(prediction,data$Class, positive = 'yes')
confusionMatrix(prediction,data$Class, positive = '1')
confusionMatrix(prediction,data$Class, positive = 1)
confusionMatrix(prediction,data$Class, positive = 'yes')
library(readxl)
data <- read_excel("divorce.xlsx")
data<-as.data.frame(data)
table(data$Class)
#solucion
data$Class <- factor(data$Class,levels=c(0,1),labels=c('yes','no'))
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
prediction<-rep(moda_div,dim(data)[1])
prediction <- factor(prediction,levels=c('no','yes'))
confusionMatrix(prediction,data$Class)
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
prediction<-rep(moda_div,dim(data)[1])
prediction <- factor(prediction,levels=c('yes','no'))
confusionMatrix(prediction,data$Class)
library(OneR)
data_disc<-data
#solucion
data_disc <- optbin(Class~.,data=data_disc)
library(OneR)
#solucion
model <- OneR(Class~.,data=data_disc, verbose = TRUE)
summary(model)
# solucion
prediction <- predict(model,data_disc)
confusionMatrix(prediction,data$Class)
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
prediction<-rep(moda_div,dim(data)[1])
prediction_0 <- factor(prediction,levels=c('yes','no'))
confusionMatrix(prediction_0,data$Class)
library(readxl)
data <- read_excel("divorce.xlsx")
data<-as.data.frame(data)
table(data$Class)
#solucion
data$Class <- factor(data$Class,levels=c(0,1),labels=c('yes','no'))
library(caret)
moda <- function(x) {
return(names(which.max(table(x))))
}
#solucion
moda_div<-moda(data$Class)
prediction<-rep(moda_div,dim(data)[1])
prediction_0 <- factor(prediction,levels=c('yes','no'))
confusionMatrix(prediction_0,data$Class)
data("Groceries")
data("Groceries")
data("Groceries")
#solution
summary(Groceries)
library(arules)
View(Groceries)
itemInfo(Groceries)
itemFrequencyPlot(Groceries,topN=10)
itemFrequencyPlot(Groceries,support=0.1)
table.trans <- crossTable(Groceries,sort=T)
table.trans[1:5,1:5]
apriori(Groceries,parameter = c(support=0.01,confidence=0.6),control=list(verbose=T))
rules <- apriori(Groceries,parameter = c(support=0.01,confidence=0.6),control=list(verbose=T))
summary(rules)
rules <- apriori(Groceries,parameter = c(support=0.01,confidence=0.3),control=list(verbose=T))
summary(rules)
rules <- apriori(Groceries,parameter = c(support=0.01,confidence=0.5),control=list(verbose=T))
summary(rules)
inspect(rules)
library(arules)
data("Groceries")
#solution
summary(Groceries)
itemInfo(Groceries)
itemFrequencyPlot(Groceries,topN=10)
itemFrequencyPlot(Groceries,support=0.1)
table.trans <- crossTable(Groceries,sort=T)
table.trans[1:5,1:5]
rules <- apriori(Groceries,parameter = c(support=0.01,confidence=0.5),control=list(verbose=T))
summary(rules)
inspect(rules)
table.trans <- crossTable(Groceries,sort=T)
table.trans[1:5,1:5]
rules <- apriori(Groceries,parameter = c(support=0.01,confidence=0.5),control=list(verbose=T))
summary(rules)
inspect(rules)
rules <- apriori(Groceries,parameter = c(support=0.1,confidence=0.5),control=list(verbose=T))
summary(rules)
inspect(rules)
rules <- apriori(Groceries,parameter = c(support=0.01,confidence=0.5),control=list(verbose=T))
summary(rules)
inspect(rules)
rules <- apriori(Groceries,parameter = c(support=0.001,confidence=0.5),control=list(verbose=T))
summary(rules)
inspect(rules)
rules <- apriori(Groceries,parameter = c(support=0.01,confidence=0.5),control=list(verbose=T))
summary(rules)
inspect(rules)
inspect(head(sort(rules, by = "confidence"),n=10))
inspect(head(sort(rules, by = "lift"),n=5))
rules_selected <- subset(rules,'milk' %in% table)
View(rules)
rules_selected <- subset(rules,'milk' %in% rules$lhs)
rules_selected <- subset(rules,'milk' %in% rules)
rules_selected <- arules::subset(rules,'milk' %in% rules$lhs)
rules_selected <- arules::subset(rules,subset=rhs %pin% 'milk')
rules_selected
rules_selected <- arules::subset(rules,subset=rhs %pin% 'milk')
inspect(rules_selected)
rules_selected <- arules::subset(rules,subset=rhs %oin% 'milk')
rules_selected <- arules::subset(rules,subset=rhs %oin% 'other vegetables')
inspect(rules_selected)
rules_df <- as(rules,"data.frame")
rules_df
library(arulesViz)
plot(rules)
plot(rules,engine="help")
plot(rules,engine="htmlwidget")
#plot(rules,engine="htmlwidget")
plot(rules,engine='htmlwidget',method="grouped",k=3)
#plot(rules,engine="htmlwidget")
plot(rules,engine='htmlwidget',method="grouped",k=5)
#plot(rules,engine="htmlwidget")
plot(rules,engine='htmlwidget',method="grouped",k=15)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
library(arulesViz)
library(Rgraphviz)
#plot(rules,engine="htmlwidget")
#plot(rules,engine='htmlwidget',method="grouped",k=15)
plot(rules,method='graph',engine='htmlwidget')
#parameter = list(minlen=2, supp=0.005, conf=0.5),
#appearance = list(rhs=c("other vegetables"),default="lhs"),
rules <- apriori(Groceries,parameter=c(minlen=2,maxlen=5,support=0.01,confidence=0.5),appearance = list(rhs=c("other vegetables"),default="lhs"),control = list(verbose=F))
library(dplyr)
fname       <- "http://www.biz.uiowa.edu/faculty/jledolter/DataMining/lastfm.csv"
lastfm      <- read.csv(fname, stringsAsFactors=FALSE)
summary(lastfm)
dsname      <- "lastfm"
ds          <- get(dsname) %>% tbl_df()
ds
ds <- ds %>% select(user, artist) %>% unique()
dataset.lastfm<-as.data.frame(ds)
save(dataset.lastfm, file="lastfm.RData")
# Reglas de AsociaciÃ³n Last.fm
View(lastfm)
library(arules)
load("lastfm.RData")
dataset.lastfm[,1]<-as.factor(dataset.lastfm[,1])
dataset.lastfm[,2]<-as.factor(dataset.lastfm[,2])
#mal
trans.mal <- as(dataset.lastfm, "transactions")
inspect(trans.mal[1:3])
load('lastfm.RData')
split(dataset.lastfm$artist,dataset.lastfm$user)
list_dataset <- split(dataset.lastfm$artist,dataset.lastfm$user)
trans.bien <- as(list_dataset, 'transactions')
View(trans.bien)
itemFrequencyPlot(trans.bien, topN=NULL)
itemFrequencyPlot(trans.bien, topN=10)
rules <- apriori(trans.bien,parameter=c(support=0.01,confidence=0.5),control = list(verbose=F))
inspect(rules)
rules <- apriori(trans.bien,parameter=c(support=0.01,confidence=0.5),control = list(verbose=F))
inspect(rules)
quality(rules)
rules_selected <- subset(rules,lift>8)
inspect(rules_selected)
plot(rules_selected, method='graph',engine='htmlwidget')
rules_selected <- subset(rules,lift>2)
inspect(rules_selected)
plot(rules_selected, method='graph',engine='htmlwidget')
rm(list=ls())
load(file="mushroom.RData")
prop.table(mushroom$class)
prop.table(mushroom)
prop.table(as.factor(mushroom$class))
prop.table(table(mushroom$class))
str(mushroom)
all(spally(mushroom,is.factor))
all(saplly(mushroom,is.factor))
all(sapply(mushroom,is.factor))
library(caret, quietly = TRUE)
library(caret, quietly = TRUE)
tranIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
trainIndex
library(caret, quietly = TRUE)
install.packages(c("cli", "colorspace", "data.table", "digest", "dplyr", "fansi", "ggrepel", "igraph", "jsonlite", "MASS", "purrr", "Rcpp", "tidyr", "utf8", "vctrs", "xfun", "yaml"))
install.packages(c("cli", "colorspace", "data.table", "digest", "dplyr", "fansi", "ggrepel", "igraph", "jsonlite", "MASS", "purrr", "Rcpp", "tidyr", "utf8", "vctrs", "xfun", "yaml"))
install.packages(c("cli", "colorspace", "data.table", "digest", "dplyr", "fansi", "ggrepel", "igraph", "jsonlite", "MASS", "purrr", "Rcpp", "tidyr", "utf8", "vctrs", "xfun", "yaml"))
rm(list=ls())
load(file="mushroom.RData")
prop.table(table(mushroom$class))
all(sapply(mushroom,is.factor))
library(caret, quietly = TRUE)
tranIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
trainIndex
tranIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
trainIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
trainIndex
model_OneR <- OneR(class~.,data=mushroom)
library(OneR)
model_OneR <- OneR(class~.,data=mushroom)
class_hat_train <- predict(model_OneR,data=mushroom[trainIndex,])
class_hat_train <- predict(model_OneR,data=mushroom[trainIndex,])
library(caret, quietly = TRUE)
trainIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
library(OneR)
model_OneR <- OneR(class~.,data=mushroom[trainIndex])
library(OneR)
model_OneR <- OneR(class~.,data=mushroom[trainIndex,])
class_hat_train <- predict(model_OneR,data=mushroom[trainIndex,])
class_hat_train <- predict(model_OneR,data=mushroom[trainIndex,])
library(caret, quietly = TRUE)
set.seed(666)
trainIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
library(OneR)
model_OneR <- OneR(class~.,data=mushroom[trainIndex,])
class_hat_train <- predict(model_OneR,data=mushroom[trainIndex,])
library(caret, quietly = TRUE)
set.seed(666)
trainIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
library(OneR)
model_OneR <- OneR(class~.,data=mushroom[trainIndex,])
class_hat_train <- predict(model_OneR,data=mushroom[trainIndex,])
class_hat_train <- predict(model_OneR,newdata=mushroom[trainIndex,])
class_hat_test <- predict(model_OneR,newdata=mushroom[-trainIndex,])
trainIndex
confusionMatrix(class_hat_train,mushroom$class[trainIndex,])
class_hat_train <- predict(model_OneR,newdata=mushroom[trainIndex,])
class_hat_test <- predict(model_OneR,newdata=mushroom[-trainIndex,])
confusionMatrix(class_hat_train,mushroom$class[trainIndex,])
library(caret, quietly = TRUE)
set.seed(666)
trainIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
library(OneR)
model_OneR <- OneR(class~.,data=mushroom[trainIndex,])
class_hat_train <- predict(model_OneR,newdata=mushroom[trainIndex,])
class_hat_test <- predict(model_OneR,newdata=mushroom[-trainIndex,])
confusionMatrix(class_hat_train,mushroom$class[trainIndex,])
summary(model_OneR)
class_hat_train
shape(class_hat_train)
dim(class_hat_train)
dim(class_hat_train)
str(class_hat_train)
str(mushroom$class[trainIndex,])
str(mushroom$class[trainIndex,])
library(arules)
library(arulesCBA)
#mushroomt<-as(mushroom,"transactions") #curiosidad
model_CBA <- CBA(class~., mushroom)
model_CBA <- CBA(class~., mushroom)
summary(model_CBA)
model_CBA <- CBA(class~., mushroom[trainIndex,])
summary(model_CBA)
model_CBA$rules
model_CBA$rules
inspect(model_CBA$rules)
inspect(model_CBA$rules,subset=rhs %in% 'e')
inspect(model_CBA$rules,subset=rhs %in% 'p')
inspect(model_CBA$rules,subset=rhs %in% 'e')
inspect(model_CBA$rules,subset=rhs %in% 'p')
inspect(model_CBA$rules,subset=rhs %pin% 'e')
inspect(model_CBA$rules,subset=rhs %pin% 'p')
inspect(model_CBA$rules,subset=rhs %in% 'e')
View(mushroom)
inspect(model_CBA$rules,subset='e' %in% rhs)
inspect(model_CBA$rules,subset='e' %in% rhs)
inspect(subset(model_CBA$rules,subset=rhs %in% 'e'))
inspect(subset(model_CBA$rules,subset=rhs %pin% c('e')))
inspect(subset(model_CBA$rules,subset=rhs %pin% c('p')))
inspect(subset(model_CBA$rules,subset=rhs %pin% c('e')))
inspect(subset(model_CBA$rules,subset=rhs %pin% c('p')))
class_hat_train <- predict(model_CBA,newdata=mushroom[trainIndex,])
class_hat_test <- predict(model_CBA,newdata=mushroom[-trainIndex,])
str(mushroom$class[trainIndex,])
class_hat_train <- predict(model_CBA,newdata=mushroom[trainIndex,])
class_hat_test <- predict(model_CBA,newdata=mushroom[-trainIndex,])
confusionMatrix(class_hat_train,mushroom$class[trainIndex,])
confusionMatrix(class_hat_train,mushroom$class[trainIndex])
confusionMatrix(class_hat_test,mushroom$class[-trainIndex])
class_hat_train <- predict(model_CBA,newdata=mushroom[trainIndex,])
class_hat_test <- predict(model_CBA,newdata=mushroom[-trainIndex,])
confusionMatrix(class_hat_train,mushroom$class[trainIndex])
#rules.to.plot<-
plot(model_CBA$rules,method='graph',engine='htmlwidget')
#rules.to.plot<-
library(arulesViz)
plot(model_CBA$rules,method='graph',engine='htmlwidget')
inspect(subset(model_CBA$rules,subset=rhs %pin% c('p')))
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.1,confidence=0.5))
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.1,confidence=0.5))
summary(model_CBA)
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.1,confidence=0.7))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.01,confidence=0.7))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.1,confidence=0.8))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.1,confidence=0.9))
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.2,confidence=0.9))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.3,confidence=0.9))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.1,confidence=0.9))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.1,confidence=0.9))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.1,confidence=1))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.25,confidence=1))
summary(model_CBA)
inspect(model_CBA$rules)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.25,confidence=1),appearance='odor')
rm(list=ls())
load(file="mushroom.RData")
prop.table(table(mushroom$class))
all(sapply(mushroom,is.factor))
library(caret, quietly = TRUE)
set.seed(666)
trainIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
library(OneR)
model_OneR <- OneR(class~.,data=mushroom[trainIndex,])
summary(model_OneR)
library(caret, quietly = TRUE)
set.seed(666)
trainIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
library(OneR)
model_OneR <- OneR(class~.,data=mushroom[trainIndex,])
summary(model_OneR)
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.25,confidence=1),appearance='odor')
library(arules)
library(arulesCBA)
#mushroomt<-as(mushroom,"transactions") #curiosidad
model_CBA <- CBA(class~., mushroom[trainIndex,])
summary(model_CBA)
inspect(model_CBA$rules)
inspect(subset(model_CBA$rules,subset=rhs %pin% c('e')))
inspect(subset(model_CBA$rules,subset=rhs %pin% c('p')))
model_CBA <- CBA(class~., mushroom[trainIndex,],parameter = c(support=0.25,confidence=1),appearance='odor')
class_hat_train <- predict(model_CBA,newdata=mushroom[trainIndex,])
class_hat_test <- predict(model_CBA,newdata=mushroom[-trainIndex,])
confusionMatrix(class_hat_train,mushroom$class[trainIndex])
confusionMatrix(class_hat_test,mushroom$class[-trainIndex])
library(caret, quietly = TRUE)
set.seed(666)
trainIndex <- createDataPartition(mushroom$class,p=0.8,times=1,list=F)
subrules <- subset(modelOneR, subset = lhs %in% c("itemA=1","itemB=1"))
set.seed(666)
x<-sample(1:3,50,replace = TRUE)
#solucion
library(tidyverse,quietly = T)
library(dplyr)
data(diamonds)
str(diamonds)
#solution
diamonds %>% group_by(cut,color,clarity) %>% mutate(cod_price=mean(price))
library(arules)
data(sunspots)  #                       Monthly Sunspot Numbers, 1749-1983
str(sunspots)
plot(sunspots)
hist(sunspots)
#solution
x <- sunspots
hist(x,breaks=20,main="Equal Interval Length")
abline(v=discretize(x,method='interval',categories=3,onlycuts=TRUE),col='red')
sunspots.discrete <- discretize(x,method='interval',categories=3)
plot(as.numeric(sunspots),pch='o',col=as.numeric(sunspots.discrete))
