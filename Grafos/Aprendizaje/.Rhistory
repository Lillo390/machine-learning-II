library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
graphviz.plot(dag)
library(readr)
survey <- read_table("survey.txt")
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
graphviz.plot(dag)
library(readr)
survey <- read_table("survey.txt")
bn_bayes <- bn.fit(dag, data=survey,method='bayes',iss=100)
# load the data.
data(lizards)
# load the data.
data(lizards)
ci.test(x='Height',y='Diameter',z='Species',data='lizards')
# load the data.
data(lizards)
ci.test(x='Height',y='Diameter',z='Species',data='lizards')
# load the data.
data(lizards)
ci.test(x='Height',y='Diameter',z='Species',data=lizards)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
graphviz.plot(dag, shape = "ellipse")
#A,E
#A,S|E
#T,E
#T,R
#T,O,R
#A,E
ci.test(x='A',y='E',data=survey)
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
graphviz.plot(dag)
survey<-read.table("survey.txt", header=TRUE, stringsAsFactors = T)
bn_mle<-bn.fit(dag, data=survey,method="mle") # aprendzaje paramétrixo por máxima
# verosimilitud
NOE<-xtabs(~O+E, data=survey)
prop.table(NOE, margin=2)
bn_mle$O
bn_bayes<-bn.fit(dag, data=survey,method="bayes",iss=100000)
bn_mle$O
bn_bayes$O
p.O.self.E.uni<-vector()
p.O.emp.E.uni<-vector()
iss<-10^seq(0, 4, by = 0.1)
# load the data.
data(lizards)
# H0 independencia condicional
ci.test(x="Height",y="Diameter", z="Species", data=lizards)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
graphviz.plot(dag, shape = "ellipse")
# S,E
ci.test(x="E",y="S", data=survey) # dependencia
# A,S
ci.test(x="A",y="S", data=survey) # independencia
#A,E
ci.test(x="A",y="E", data=survey) # son dependientes
#A,S|E
ci.test(x="A",y="S", z="E", data=survey) # independencia
#T,E
ci.test(x="T",y="E", data=survey) # independencia
#T,R
ci.test(x="T",y="R", data=survey) # dependencia
#T,O,R
ci.test(x="O",y="O" ,data=survey) # NO ESTÁ BIEN Y NO SÉ CÓMO PONERLO
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
arc.strng<-arc.strength(dag, data=survey, criterios="x2")
arc.strng[order(-arc.strng$strength),]
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
bnlearn::score(dag, data = survey, type = "bic")#Bayesian Information criterion (BIC)
rnd <- random.graph(nodes = c("A", "S", "E", "O", "R", "T"))
modelstring(rnd)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
#Grow-Shrink (GS)
bn.gs<-gs(data, test="mi",debug=F)
graphviz.plot(bn.gs)
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
#Hill-Climbing
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
#Hill-Climbing
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.001)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
#Hill-Climbing
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.1)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
#Hill-Climbing
graph.gs <- gs(data,test='mi',debug=F, alpha=0.2)
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.2)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
#Hill-Climbing
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.3)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
#Hill-Climbing
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.4)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
#Hill-Climbing
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.5)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
#Hill-Climbing
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.1)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
#Hill-Climbing
library(bnlearn)
set.seed(666)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.1)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
pdag2dag()
library(bnlearn)
set.seed(666)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
data<-survey
graph.gs <- gs(data,test='mi',debug=F, alpha=0.1)
library(Rgraphviz)
graphviz.plot(graph.gs)
directed(graph.gs)
acyclic(graph.gs)
dag.gs <- pdag2dag(graph.gs,ordering=c('A','S','E','O','R','T'))
library(bnlearn)
dag<-model2network("[A][S][E|A:S][O|E][R|E][T|O:R]")
bnlearn::score(dag, data = survey, type = "bic")#Bayesian Information criterion (BIC)
